#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tap-spring-developer-workshops
spec:
  title: TAP for Spring Developers
  description: A workshop that demonstrates capabilities of VMware Tanzu Application Platform for Spring developers.
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 60m
  url: https://github.com/tsalm-vmware/tap-spring-developer-workshop
  content:
    image: #@ "{}".format(data.values.workshop_container_image)
    files: #@ "github.com/{}/tap-spring-developer-workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    namespaces:
      budget: custom
      role: view
    applications:
      terminal:
        enabled: true
        layout: split
      editor:
        enabled: true
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    - name: GITEA_BASE_URL
      value: #@ data.values.gitea.base_url
    - name: GITEA_USERNAME
      value: #@ data.values.gitea.basic_auth_username
    - name: GITEA_PASSWORD
      value: #@ data.values.gitea.basic_auth_password
    ingresses:
    - name: twelve-factors
      protocol: https
      host: 12factor.net 
      port: 443
    objects:   
    # Permissions for workshop session
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: $(session_namespace)-session-cr
      rules:
      - apiGroups: [services.apps.tanzu.vmware.com]
        resources: [clusterinstanceclasses]
        verbs: [get, list, claim]    
      - apiGroups: [""]
        resources: [nodes]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [learningcenter.tanzu.vmware.com]
        resources: [workshopsessions]
        verbs: ["get", "watch", "list"]          
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: $(session_namespace)-session-rb
        namespace: $(session_namespace)
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: $(session_namespace)-session-cr
      subjects:
        - kind: ServiceAccount
          namespace: $(workshop_namespace)
          name: $(service_account)
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: $(session_namespace)-session
        namespace: $(session_namespace)
      rules:
      - apiGroups: [""]
        resources: ["pods/portforward","pods/exec"]
        verbs: ['*']
      - apiGroups: [""]
        resources: [namespaces, serviceaccounts]
        verbs: [patch]
      - apiGroups: ["metrics.k8s.io"]
        resources: [pods]
        verbs: [list]
      - apiGroups: [ "kappctrl.k14s.io" ]
        resources: [ apps ]
        verbs: [ '*' ]
      - apiGroups: [carto.run]
        resources: [workloads, runnables]
        verbs: ['*']
      - apiGroups: [services.apps.tanzu.vmware.com]
        resources: [classclaims, resourceclaims]
        verbs: ['*']        
      - apiGroups: [claimable.services.apps.tanzu.vmware.com]
        resources: [instancequeries]
        verbs: ['*']  
      - apiGroups: [config.apps.tanzu.vmware.com]    
        resources: [configurationsources, configurationslices]
        verbs: ['*'] 
      - apiGroups: [tanzu.vmware.com]    
        resources: [springcloudgateways, springcloudgatewayrouteconfigs, springcloudgatewaymappings]
        verbs: ['*'] 
      - apiGroups: [sso.apps.tanzu.vmware.com]    
        resources: [authservers, clientregistrations]
        verbs: ['*'] 
      - apiGroups: [secretgen.k14s.io]    
        resources: [rsakeys]
        verbs: ['*'] 
      - apiGroups: [tekton.dev]
        resources: [pipelines, taskruns]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [kpack.io]
        resources: [builds, images]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [serving.knative.dev]
        resources: [revisions, configurations, routes, services]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [networking.internal.knative.dev]
        resources: [ingresses, serverlessservices]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [servicebinding.io]
        resources: [servicebindings]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [source.apps.tanzu.vmware.com]
        resources: [imagerepositories]
        verbs: ["get", "watch", "list"]    
      - apiGroups: [autoscaling.internal.knative.dev]
        resources: [podautoscalers]
        verbs: ["get", "watch", "list"]          
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: $(session_namespace)-session-rb
        namespace: $(session_namespace)
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-session
      subjects:
        - kind: ServiceAccount
          namespace: $(workshop_namespace)
          name: $(service_account)
    # Resources
    - apiVersion: v1
      kind: Secret
      metadata:
        name: registry-credentials
      type: kubernetes.io/dockerconfigjson
      data:
        #@ docker_creds = {"username": data.values.container_registry.username, "password": data.values.container_registry.password}
        .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.container_registry.hostname: docker_creds}}))
    - apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: developer-defined-tekton-pipeline
        labels:
          apps.tanzu.vmware.com/pipeline: test     # (!) required
      spec:
        params:
          - name: source-url                       # (!) required
          - name: source-revision                  # (!) required
          - name: source-sub-path
            default: "."
        tasks:
          - name: test
            params:
              - name: source-url
                value: $(params.source-url)
              - name: source-revision
                value: $(params.source-revision)
              - name: source-sub-path
                value: $(params.source-sub-path)
            taskSpec:
              params:
                - name: source-url
                - name: source-revision
                - name: source-sub-path
              steps:
                - name: test
                  image: gradle
                  script: |-
                    cd `mktemp -d`

                    wget -qO- $(params.source-url) | tar xvz -m
                    cd $(params.source-sub-path)
                    ./mvnw test
    - apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
      kind: ScanPolicy
      metadata:
        name: scan-policy
        labels:
          app.kubernetes.io/part-of: enable-in-gui
      spec:
        regoFile: |
          package main

          # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
          notAllowedSeverities := ["UnknownSeverity"]
          ignoreCves := []

          contains(array, elem) = true {
            array[_] = elem
          } else = false { true }

          isSafe(match) {
            severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
            some i
            fails := contains(notAllowedSeverities, severities[i])
            not fails
          }

          isSafe(match) {
            ignore := contains(ignoreCves, match.id)
            ignore
          }

          deny[msg] {
            comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
            some i
            comp := comps[i]
            vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
            some j
            vuln := vulns[j]
            ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
            not isSafe(vuln)
            msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
          }
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: zipkin
      spec:
        selector:
          matchLabels:
            app: zipkin
        template:
          metadata:
            labels:
              app: zipkin
          spec:
            containers:
              - image: openzipkin/zipkin
                name: zipkin
                ports:
                  - containerPort: 9411
                    protocol: TCP
    - apiVersion: v1
      kind: Service
      metadata:
        name: zipkin
      spec:
        selector:
          app: zipkin
        ports:
          - name: http
            port: 9411
            protocol: TCP
            targetPort: 9411
    - apiVersion: v1
      kind: Secret
      metadata:
        name: zipkin-binding-compatible
      type: Opaque
      stringData:
        type: zipkin
        uri: http://zipkin:9411
    - apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ResourceClaim
      metadata:
        name: zipkin-1
      spec:
        ref:
          apiVersion: v1
          kind: Secret
          name: zipkin-binding-compatible
    - apiVersion: projectcontour.io/v1
      kind: HTTPProxy
      metadata:
        name: zipkin
      spec:
        routes:
          - conditions:
              - prefix: /
            services:
              - name: zipkin
                port: 9411
        virtualhost:
          fqdn: #@ "zipkin-$(session_namespace).{}".format(data.values.tap.ingress_domain)
          tls:
            secretName: #@ data.values.tap.ingress_wildcard_cert
    - apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ResourceClaim
      metadata:
        name: product-config-server-claim
      spec:
        ref:
          apiVersion: config.apps.tanzu.vmware.com/v1alpha4
          kind: ConfigurationSlice
          name: product-config-slice
    - apiVersion: "config.apps.tanzu.vmware.com/v1alpha4"
      kind: ConfigurationSlice
      metadata:
        name: order-config-slice
      spec:
        configurationSource: config-source
        content:
        - order-service
    - apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ResourceClaim
      metadata:
        name: order-config-server-claim
      spec:
        ref:
          apiVersion: config.apps.tanzu.vmware.com/v1alpha4
          kind: ConfigurationSlice
          name: order-config-slice
    - apiVersion: "config.apps.tanzu.vmware.com/v1alpha4"
      kind: ConfigurationSlice
      metadata:
        name: shipping-config-slice
      spec:
        configurationSource: config-source
        content:
        - shipping-service
    - apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ResourceClaim
      metadata:
        name: shipping-config-server-claim
      spec:
        ref:
          apiVersion: config.apps.tanzu.vmware.com/v1alpha4
          kind: ConfigurationSlice
          name: shipping-config-slice
    - apiVersion: projectcontour.io/v1
      kind: HTTPProxy
      metadata:
        name: api-gateway
      spec:
        routes:
          - conditions:
              - prefix: /
            services:
              - name: api-gateway-1
                port: 80
        virtualhost:
          fqdn: #@ "gateway-$(session_namespace).{}".format(data.values.tap.ingress_domain)
          tls:
            secretName: #@ data.values.tap.ingress_wildcard_cert
    - apiVersion: services.apps.tanzu.vmware.com/v1alpha1
      kind: ResourceClaim
      metadata:
        name: auth-client
      spec:
        ref:
          apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
          kind: ClientRegistration
          name: client-registration
    - apiVersion: projectcontour.io/v1
      kind: HTTPProxy
      metadata:
        name: authserver-1
      spec:
        routes:
        - services:
          - name: authserver-1-auth-server
            port: 80
        virtualhost:
          corsPolicy:
            allowMethods:
            - '*'
            allowOrigin:
            - '*'
          fqdn: #@ "authserver-1-$(session_namespace).{}".format(data.values.tap.ingress_domain)
          tls:
            secretName: #@ data.values.tap.ingress_wildcard_cert

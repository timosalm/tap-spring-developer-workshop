#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: tap-spring-developer-workshops
spec:
  title: TAP for Spring Developers
  description: A workshop that demonstrates capabilities of VMware Tanzu Application Platform for Spring developers.
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 60m
  url: https://github.com/tsalm-vmware/tap-spring-developer-workshop
  content:
    image: #@ "{}".format(data.values.workshop_container_image)
    files: #@ "github.com/{}/tap-spring-developer-workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: true
      editor:
        enabled: true
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    objects:
    # Install grype
    - apiVersion: packaging.carvel.dev/v1alpha1
      kind: PackageInstall
      metadata:
        name: $(session_namespace)-grype
        namespace: tap-install
      spec:
        serviceAccountName: tap-install-sa
        packageRef:
          refName: grype.scanning.apps.tanzu.vmware.com
          versionSelection:
            constraints: ">=0.0.0"
            prereleases:
              identifiers: [beta, build]
        values:
        - secretRef:
            name: $(session_namespace)-grype-values
    - apiVersion: v1
      kind: Secret
      metadata:
        name: $(session_namespace)-grype-values
        namespace: tap-install
      stringData:
        values.yaml: |
          ---
          namespace: $(session_namespace)
          targetImagePullSecret: registry-credentials
    # Permissions for workshop session
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: $(session_namespace)-session
        namespace: $(session_namespace)
      rules:
      - apiGroups: [scanning.apps.tanzu.vmware.com]
        resources: [scanpolicies]
        verbs: ['*']
      - apiGroups:
        - ""
        resources:
        - namespaces
        verbs:
        - 'patch'
      - apiGroups:
        - carto.run
        resources:
        - workloads
        verbs:
        - '*'
      - apiGroups: [services.apps.tanzu.vmware.com]
        resources: [classclaims,clusterinstanceclasses]
        verbs: ['*']        
      - apiGroups: [claimable.services.apps.tanzu.vmware.com]
        resources: [instancequeries]
        verbs: ['*']         
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: $(session_namespace)-session-rb
        namespace: $(session_namespace)
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: $(session_namespace)-session
      subjects:
        - kind: ServiceAccount
          namespace: $(workshop_namespace)
          name: $(service_account)
    # Resources
    - apiVersion: tekton.dev/v1beta1
      kind: Pipeline
      metadata:
        name: developer-defined-tekton-pipeline
        labels:
          apps.tanzu.vmware.com/pipeline: test     # (!) required
      spec:
        params:
          - name: source-url                       # (!) required
          - name: source-revision                  # (!) required
          - name: source-sub-path
            default: "."
        tasks:
          - name: test
            params:
              - name: source-url
                value: $(params.source-url)
              - name: source-revision
                value: $(params.source-revision)
              - name: source-sub-path
                value: $(params.source-sub-path)
            taskSpec:
              params:
                - name: source-url
                - name: source-revision
                - name: source-sub-path
              steps:
                - name: test
                  image: gradle
                  script: |-
                    cd `mktemp -d`

                    wget -qO- $(params.source-url) | tar xvz -m
                    cd $(params.source-sub-path)
                    ./mvnw test
